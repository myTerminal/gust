#!/usr/bin/sbcl --script

(defun string-to-list (input-string char)
  "Converts a string containing NewLine characters into a list of strings."
  (let* ((temp-chars '())
         (items '()))
    (labels ((to-string (chars)
               (coerce (reverse chars) 'string))
             (collect-item ()
               (push (to-string temp-chars) items)
               (setf temp-chars '())))
      (mapc (lambda (c)
              (cond ((eql c char) (collect-item))
                    (t (push c temp-chars))))
            (coerce input-string 'list))
      (collect-item)
      (reverse items))))

(let* ((lines (string-to-list (cadr *posix-argv*)
                              #\Newline))
       (adapter-lines (remove-if-not (lambda (x)
                                       (and (> (length x) 0)
                                            (or (string-equal (subseq x 1 2) ":")
                                                (string-equal (subseq x 2 3) ":"))))
                                     lines))
       (adapter-names-with-colons (mapcar (lambda (x)
                                            (cadr (string-to-list x #\ )))
                                          adapter-lines))
       (adapter-names (mapcar (lambda (x)
                                (car (string-to-list x #\:)))
                              adapter-names-with-colons))
       (adapter-names-except-lo (remove-if (lambda (x)
                                             (string-equal x
                                                           "lo"))
                                           adapter-names)))
  (princ (reduce (lambda (a b)
                   (concatenate 'string a "
" b))
                 adapter-names-except-lo)))
(princ #\Newline)
